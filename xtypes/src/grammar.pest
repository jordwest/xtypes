alpha = { 'a'..'z' | 'A'..'Z' }
digit = { '0'..'9' }
underscore = @{ "_" }
ident = @{ alpha ~ (alpha | digit | underscore)* }
wildcard = { "*" }
dotted_ident = ${ ident ~ ("." ~ (ident | wildcard))* }

WHITESPACE = _{ (" " | "\t" | "\r" | "\n") }
// COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* ~ "\n" }
string_value = { (!("\"") ~ ANY)* }

generic_type = { ident ~ "<" ~ type_name ~ ">" }
type_name = { (generic_type | dotted_ident) }

tuple = { "(" ~ dotted_ident ~ ("," ~ dotted_ident)* ~ ")" }

attribute = {"#[" ~ dotted_ident ~ "=" ~ "\"" ~ string_value ~ "\"" ~ "]"}
variant = { attribute* ~ ident ~ tuple? }
enum_message = { "|"? ~ variant ~ ("|" ~ variant)* }

optional = { "?" }
field_name = { ident }
struct_field = { attribute* ~ field_name ~ (optional)? ~ ":" ~ type_name ~ "," }
struct_message = { "{" ~ struct_field* ~ "}" }

message_keyword = _{ "message" }
message = { attribute* ~ message_keyword ~ type_name ~ "=" ~ (enum_message | struct_message) ~ ";"}

module_decl = { attribute* ~ "module" ~ dotted_ident ~ ";" }

filename = { (alpha | digit | underscore | "-" | "." | "/" | "\\")* }
use_statement = { attribute* ~ "use" ~ "\"" ~ filename ~ "\"" ~ "as" ~ (ident | wildcard) ~ ";" }

typedef = { attribute* ~ "type" ~ type_name ~ ";" }

file = { WHITESPACE* ~ module_decl ~ use_statement* ~ (message | typedef)* ~ EOI }
