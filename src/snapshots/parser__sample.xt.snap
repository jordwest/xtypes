---
created: "2019-04-24T08:38:34.250912Z"
creator: insta@0.6.3
source: src/parser.rs
expression: file
---
XtFile {
    module_info: ModuleInfo {
        name: "Sample.Test",
        attrs: AttributeList(
            {
                "output": Attribute {
                    name: "output",
                    value: "/sample/test/somefile.txt"
                }
            }
        )
    },
    use_imports: [
        ModuleUse {
            attrs: AttributeList(
                {}
            ),
            filename: "prelude.xt",
            ident: Wildcard
        },
        ModuleUse {
            attrs: AttributeList(
                {
                    "import_attr": Attribute {
                        name: "import_attr",
                        value: "test123"
                    }
                }
            ),
            filename: "sample2.xt",
            ident: Ident(
                "Sample2"
            )
        }
    ],
    symbols: [
        SymbolDefinition {
            name: Concrete(
                "EnumSample"
            ),
            attrs: AttributeList(
                {
                    "doc": Attribute {
                        name: "doc",
                        value: "This message could be one of three shapes"
                    }
                }
            ),
            value: Message(
                Enum(
                    EnumMessage {
                        variants: [
                            EnumVariant {
                                name: "One",
                                attrs: AttributeList(
                                    {
                                        "json.tag": Attribute {
                                            name: "json.tag",
                                            value: "A"
                                        },
                                        "thing.stuff": Attribute {
                                            name: "thing.stuff",
                                            value: "xyz"
                                        }
                                    }
                                ),
                                content: None
                            },
                            EnumVariant {
                                name: "Two",
                                attrs: AttributeList(
                                    {
                                        "blah": Attribute {
                                            name: "blah",
                                            value: "X"
                                        }
                                    }
                                ),
                                content: Some(
                                    Tuple(
                                        [
                                            "StructSample",
                                            "Boolean"
                                        ]
                                    )
                                )
                            },
                            EnumVariant {
                                name: "Three",
                                attrs: AttributeList(
                                    {}
                                ),
                                content: None
                            }
                        ]
                    }
                )
            )
        },
        SymbolDefinition {
            name: Concrete(
                "StructSample"
            ),
            attrs: AttributeList(
                {
                    "doc": Attribute {
                        name: "doc",
                        value: "Example of a struct/record type"
                    },
                    "http.method": Attribute {
                        name: "http.method",
                        value: "GET"
                    }
                }
            ),
            value: Message(
                Struct(
                    StructMessage {
                        fields: [
                            StructField {
                                name: "repeated_field",
                                type_name: Generic(
                                    "Thing",
                                    Generic(
                                        "Array",
                                        Concrete(
                                            "string"
                                        )
                                    )
                                ),
                                is_optional: false,
                                attrs: AttributeList(
                                    {
                                        "json.key": Attribute {
                                            name: "json.key",
                                            value: "X"
                                        }
                                    }
                                )
                            },
                            StructField {
                                name: "optional_field",
                                type_name: Concrete(
                                    "type"
                                ),
                                is_optional: true,
                                attrs: AttributeList(
                                    {
                                        "json.key": Attribute {
                                            name: "json.key",
                                            value: "Y"
                                        }
                                    }
                                )
                            }
                        ]
                    }
                )
            )
        }
    ]
}
