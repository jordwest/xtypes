---
created: "2019-04-24T08:38:34.252519Z"
creator: insta@0.6.3
source: src/module_loader.rs
expression: scope
---
ModuleScope {
    symbol_map: {
        "Array": ScopeItem {
            symbol: SymbolDefinition {
                name: Generic(
                    "Array",
                    Concrete(
                        "T"
                    )
                ),
                attrs: AttributeList(
                    {}
                ),
                value: Primitive
            },
            fully_qualified_name: "Array",
            use_statement: Some(
                ModuleUse {
                    attrs: AttributeList(
                        {}
                    ),
                    filename: "prelude.xt",
                    ident: Wildcard
                }
            )
        },
        "EnumSample": ScopeItem {
            symbol: SymbolDefinition {
                name: Concrete(
                    "EnumSample"
                ),
                attrs: AttributeList(
                    {
                        "doc": Attribute {
                            name: "doc",
                            value: "This message could be one of three shapes"
                        }
                    }
                ),
                value: Message(
                    Enum(
                        EnumMessage {
                            variants: [
                                EnumVariant {
                                    name: "One",
                                    attrs: AttributeList(
                                        {
                                            "json.tag": Attribute {
                                                name: "json.tag",
                                                value: "A"
                                            },
                                            "thing.stuff": Attribute {
                                                name: "thing.stuff",
                                                value: "xyz"
                                            }
                                        }
                                    ),
                                    content: None
                                },
                                EnumVariant {
                                    name: "Two",
                                    attrs: AttributeList(
                                        {
                                            "blah": Attribute {
                                                name: "blah",
                                                value: "X"
                                            }
                                        }
                                    ),
                                    content: Some(
                                        Tuple(
                                            [
                                                "StructSample",
                                                "Boolean"
                                            ]
                                        )
                                    )
                                },
                                EnumVariant {
                                    name: "Three",
                                    attrs: AttributeList(
                                        {}
                                    ),
                                    content: None
                                }
                            ]
                        }
                    )
                )
            },
            fully_qualified_name: "EnumSample",
            use_statement: None
        },
        "Option": ScopeItem {
            symbol: SymbolDefinition {
                name: Generic(
                    "Option",
                    Concrete(
                        "T"
                    )
                ),
                attrs: AttributeList(
                    {}
                ),
                value: Primitive
            },
            fully_qualified_name: "Option",
            use_statement: Some(
                ModuleUse {
                    attrs: AttributeList(
                        {}
                    ),
                    filename: "prelude.xt",
                    ident: Wildcard
                }
            )
        },
        "Sample2.StructSample": ScopeItem {
            symbol: SymbolDefinition {
                name: Generic(
                    "StructSample",
                    Concrete(
                        "T"
                    )
                ),
                attrs: AttributeList(
                    {}
                ),
                value: Message(
                    Struct(
                        StructMessage {
                            fields: [
                                StructField {
                                    name: "has_many",
                                    type_name: Generic(
                                        "Array",
                                        Concrete(
                                            "T"
                                        )
                                    ),
                                    is_optional: false,
                                    attrs: AttributeList(
                                        {}
                                    )
                                }
                            ]
                        }
                    )
                )
            },
            fully_qualified_name: "Sample2.StructSample",
            use_statement: Some(
                ModuleUse {
                    attrs: AttributeList(
                        {
                            "import_attr": Attribute {
                                name: "import_attr",
                                value: "test123"
                            }
                        }
                    ),
                    filename: "sample2.xt",
                    ident: Ident(
                        "Sample2"
                    )
                }
            )
        },
        "StructSample": ScopeItem {
            symbol: SymbolDefinition {
                name: Concrete(
                    "StructSample"
                ),
                attrs: AttributeList(
                    {
                        "doc": Attribute {
                            name: "doc",
                            value: "Example of a struct/record type"
                        },
                        "http.method": Attribute {
                            name: "http.method",
                            value: "GET"
                        }
                    }
                ),
                value: Message(
                    Struct(
                        StructMessage {
                            fields: [
                                StructField {
                                    name: "repeated_field",
                                    type_name: Generic(
                                        "Thing",
                                        Generic(
                                            "Array",
                                            Concrete(
                                                "string"
                                            )
                                        )
                                    ),
                                    is_optional: false,
                                    attrs: AttributeList(
                                        {
                                            "json.key": Attribute {
                                                name: "json.key",
                                                value: "X"
                                            }
                                        }
                                    )
                                },
                                StructField {
                                    name: "optional_field",
                                    type_name: Concrete(
                                        "type"
                                    ),
                                    is_optional: true,
                                    attrs: AttributeList(
                                        {
                                            "json.key": Attribute {
                                                name: "json.key",
                                                value: "Y"
                                            }
                                        }
                                    )
                                }
                            ]
                        }
                    )
                )
            },
            fully_qualified_name: "StructSample",
            use_statement: None
        },
        "boolean": ScopeItem {
            symbol: SymbolDefinition {
                name: Concrete(
                    "boolean"
                ),
                attrs: AttributeList(
                    {
                        "js.type": Attribute {
                            name: "js.type",
                            value: "boolean"
                        },
                        "rust.type": Attribute {
                            name: "rust.type",
                            value: "bool"
                        }
                    }
                ),
                value: Primitive
            },
            fully_qualified_name: "boolean",
            use_statement: Some(
                ModuleUse {
                    attrs: AttributeList(
                        {}
                    ),
                    filename: "prelude.xt",
                    ident: Wildcard
                }
            )
        },
        "float32": ScopeItem {
            symbol: SymbolDefinition {
                name: Concrete(
                    "float32"
                ),
                attrs: AttributeList(
                    {
                        "js.type": Attribute {
                            name: "js.type",
                            value: "number"
                        },
                        "rust.type": Attribute {
                            name: "rust.type",
                            value: "f32"
                        }
                    }
                ),
                value: Primitive
            },
            fully_qualified_name: "float32",
            use_statement: Some(
                ModuleUse {
                    attrs: AttributeList(
                        {}
                    ),
                    filename: "prelude.xt",
                    ident: Wildcard
                }
            )
        },
        "int32": ScopeItem {
            symbol: SymbolDefinition {
                name: Concrete(
                    "int32"
                ),
                attrs: AttributeList(
                    {
                        "js.type": Attribute {
                            name: "js.type",
                            value: "number"
                        },
                        "rust.type": Attribute {
                            name: "rust.type",
                            value: "i32"
                        }
                    }
                ),
                value: Primitive
            },
            fully_qualified_name: "int32",
            use_statement: Some(
                ModuleUse {
                    attrs: AttributeList(
                        {}
                    ),
                    filename: "prelude.xt",
                    ident: Wildcard
                }
            )
        },
        "string": ScopeItem {
            symbol: SymbolDefinition {
                name: Concrete(
                    "string"
                ),
                attrs: AttributeList(
                    {
                        "js.type": Attribute {
                            name: "js.type",
                            value: "string"
                        },
                        "rust.type": Attribute {
                            name: "rust.type",
                            value: "String"
                        }
                    }
                ),
                value: Primitive
            },
            fully_qualified_name: "string",
            use_statement: Some(
                ModuleUse {
                    attrs: AttributeList(
                        {}
                    ),
                    filename: "prelude.xt",
                    ident: Wildcard
                }
            )
        }
    },
    module: XtFile {
        module_info: ModuleInfo {
            name: "Sample.Test",
            attrs: AttributeList(
                {
                    "output": Attribute {
                        name: "output",
                        value: "/sample/test/somefile.txt"
                    }
                }
            )
        },
        use_imports: [
            ModuleUse {
                attrs: AttributeList(
                    {}
                ),
                filename: "prelude.xt",
                ident: Wildcard
            },
            ModuleUse {
                attrs: AttributeList(
                    {
                        "import_attr": Attribute {
                            name: "import_attr",
                            value: "test123"
                        }
                    }
                ),
                filename: "sample2.xt",
                ident: Ident(
                    "Sample2"
                )
            }
        ],
        symbols: [
            SymbolDefinition {
                name: Concrete(
                    "EnumSample"
                ),
                attrs: AttributeList(
                    {
                        "doc": Attribute {
                            name: "doc",
                            value: "This message could be one of three shapes"
                        }
                    }
                ),
                value: Message(
                    Enum(
                        EnumMessage {
                            variants: [
                                EnumVariant {
                                    name: "One",
                                    attrs: AttributeList(
                                        {
                                            "json.tag": Attribute {
                                                name: "json.tag",
                                                value: "A"
                                            },
                                            "thing.stuff": Attribute {
                                                name: "thing.stuff",
                                                value: "xyz"
                                            }
                                        }
                                    ),
                                    content: None
                                },
                                EnumVariant {
                                    name: "Two",
                                    attrs: AttributeList(
                                        {
                                            "blah": Attribute {
                                                name: "blah",
                                                value: "X"
                                            }
                                        }
                                    ),
                                    content: Some(
                                        Tuple(
                                            [
                                                "StructSample",
                                                "Boolean"
                                            ]
                                        )
                                    )
                                },
                                EnumVariant {
                                    name: "Three",
                                    attrs: AttributeList(
                                        {}
                                    ),
                                    content: None
                                }
                            ]
                        }
                    )
                )
            },
            SymbolDefinition {
                name: Concrete(
                    "StructSample"
                ),
                attrs: AttributeList(
                    {
                        "doc": Attribute {
                            name: "doc",
                            value: "Example of a struct/record type"
                        },
                        "http.method": Attribute {
                            name: "http.method",
                            value: "GET"
                        }
                    }
                ),
                value: Message(
                    Struct(
                        StructMessage {
                            fields: [
                                StructField {
                                    name: "repeated_field",
                                    type_name: Generic(
                                        "Thing",
                                        Generic(
                                            "Array",
                                            Concrete(
                                                "string"
                                            )
                                        )
                                    ),
                                    is_optional: false,
                                    attrs: AttributeList(
                                        {
                                            "json.key": Attribute {
                                                name: "json.key",
                                                value: "X"
                                            }
                                        }
                                    )
                                },
                                StructField {
                                    name: "optional_field",
                                    type_name: Concrete(
                                        "type"
                                    ),
                                    is_optional: true,
                                    attrs: AttributeList(
                                        {
                                            "json.key": Attribute {
                                                name: "json.key",
                                                value: "Y"
                                            }
                                        }
                                    )
                                }
                            ]
                        }
                    )
                )
            }
        ]
    },
    modules: [
        XtFile {
            module_info: ModuleInfo {
                name: "XTypes.Prelude",
                attrs: AttributeList(
                    {}
                )
            },
            use_imports: [],
            symbols: [
                SymbolDefinition {
                    name: Concrete(
                        "boolean"
                    ),
                    attrs: AttributeList(
                        {
                            "js.type": Attribute {
                                name: "js.type",
                                value: "boolean"
                            },
                            "rust.type": Attribute {
                                name: "rust.type",
                                value: "bool"
                            }
                        }
                    ),
                    value: Primitive
                },
                SymbolDefinition {
                    name: Concrete(
                        "string"
                    ),
                    attrs: AttributeList(
                        {
                            "js.type": Attribute {
                                name: "js.type",
                                value: "string"
                            },
                            "rust.type": Attribute {
                                name: "rust.type",
                                value: "String"
                            }
                        }
                    ),
                    value: Primitive
                },
                SymbolDefinition {
                    name: Concrete(
                        "float32"
                    ),
                    attrs: AttributeList(
                        {
                            "js.type": Attribute {
                                name: "js.type",
                                value: "number"
                            },
                            "rust.type": Attribute {
                                name: "rust.type",
                                value: "f32"
                            }
                        }
                    ),
                    value: Primitive
                },
                SymbolDefinition {
                    name: Concrete(
                        "int32"
                    ),
                    attrs: AttributeList(
                        {
                            "js.type": Attribute {
                                name: "js.type",
                                value: "number"
                            },
                            "rust.type": Attribute {
                                name: "rust.type",
                                value: "i32"
                            }
                        }
                    ),
                    value: Primitive
                },
                SymbolDefinition {
                    name: Generic(
                        "Option",
                        Concrete(
                            "T"
                        )
                    ),
                    attrs: AttributeList(
                        {}
                    ),
                    value: Primitive
                },
                SymbolDefinition {
                    name: Generic(
                        "Array",
                        Concrete(
                            "T"
                        )
                    ),
                    attrs: AttributeList(
                        {}
                    ),
                    value: Primitive
                }
            ]
        },
        XtFile {
            module_info: ModuleInfo {
                name: "Sample.Test2",
                attrs: AttributeList(
                    {
                        "output": Attribute {
                            name: "output",
                            value: "/sample/test/somefile.txt"
                        }
                    }
                )
            },
            use_imports: [
                ModuleUse {
                    attrs: AttributeList(
                        {}
                    ),
                    filename: "prelude.xt",
                    ident: Wildcard
                }
            ],
            symbols: [
                SymbolDefinition {
                    name: Generic(
                        "StructSample",
                        Concrete(
                            "T"
                        )
                    ),
                    attrs: AttributeList(
                        {}
                    ),
                    value: Message(
                        Struct(
                            StructMessage {
                                fields: [
                                    StructField {
                                        name: "has_many",
                                        type_name: Generic(
                                            "Array",
                                            Concrete(
                                                "T"
                                            )
                                        ),
                                        is_optional: false,
                                        attrs: AttributeList(
                                            {}
                                        )
                                    }
                                ]
                            }
                        )
                    )
                }
            ]
        }
    ]
}
